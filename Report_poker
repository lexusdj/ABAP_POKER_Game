CLASS lcl_random_num DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS: class_constructor,
      get_next_number IMPORTING i_max TYPE i RETURNING VALUE(r_val) TYPE i.
  PRIVATE SECTION.
    CLASS-DATA: lo_rand TYPE REF TO cl_abap_random,
                seed    TYPE i.
ENDCLASS.
CLASS lcl_random_num IMPLEMENTATION.
  METHOD class_constructor.
*    ADD 1 TO seed.
    seed = cl_abap_random=>seed( ).
    lo_rand = cl_abap_random=>create(
              seed = seed
          ).
  ENDMETHOD.

  METHOD get_next_number.
    r_val = lo_rand->intinrange( low = 1 high = i_max ).
  ENDMETHOD.

ENDCLASS.
CLASS lcl_card DEFINITION.
  PUBLIC SECTION.
    DATA: palo(10) TYPE c, "picas, corazones, trebol... o bastos oros copas espadas...
          valor(2) TYPE c, "numerical character K-Q-J o sota caballo rey
          color(1) TYPE c. "para poker rojo o negro o no se usa
    METHODS constructor IMPORTING iv_tipo TYPE c iv_valor TYPE c iv_color TYPE c OPTIONAL.
  PRIVATE SECTION.
ENDCLASS.
CLASS lcl_card IMPLEMENTATION.
  METHOD constructor.
    palo = iv_tipo.
    valor = iv_valor.
    color = iv_color.
  ENDMETHOD.

ENDCLASS.
CLASS lcl_baraja DEFINITION.
  PUBLIC SECTION.
    TYPES: BEGIN OF ty_baraja,
             carta TYPE REF TO lcl_card,
           END OF ty_baraja,
           ty_barajas TYPE STANDARD TABLE OF ty_baraja WITH DEFAULT KEY.
    METHODS: constructor IMPORTING iv_game TYPE c, "create la baraja de cartas
      barajar_cartas, "mezcla cartas
      get_cartas RETURNING VALUE(r_cartas) TYPE ty_barajas,
      give_card RETURNING VALUE(r_carta) TYPE REF TO lcl_card.
*      remove_card IMPORTING i_carta  TYPE REF TO lcl_card.
    "A RETURNING parameter must be fully typed. (internal table type must contain a key specification "WITH DEFAULT KEY")
  PRIVATE SECTION.
    DATA cartas TYPE ty_barajas.
    METHODS: remove_card IMPORTING i_carta  TYPE REF TO lcl_card.
ENDCLASS.
CLASS lcl_baraja IMPLEMENTATION.

  METHOD constructor.
    DATA: palo        TYPE i,
          palo_ch(10) TYPE c,
          color       TYPE c,
          numero      TYPE i,
          figura(2)   TYPE c,
          l_carta     TYPE ty_baraja.

    CASE iv_game.
      WHEN 'Poker'.
        DO 4 TIMES." por tipo
          ADD 1 TO palo.
          CASE palo.
            WHEN 1. "picas color negro
              palo_ch = 'Picas'.
              color = 'N'. "->negro
            WHEN 2. "corazones - rojo
              palo_ch = 'Corazones'.
              color = 'R'. "->rojo
            WHEN 3. "trebol - negro
              palo_ch = 'Trebol'.
              color = 'N'. "->negro
            WHEN 4. "diamante - rojo
              palo_ch = 'Diamante'.
              color = 'R'. "->rojo
          ENDCASE.
          CLEAR numero.
          DO 13 TIMES.
            ADD 1 TO numero.
            CASE numero.
              WHEN 11.
                figura = 'J'.
              WHEN 12.
                figura = 'Q'.
              WHEN 13.
                figura = 'K'.
              WHEN OTHERS.
                figura = numero.
            ENDCASE.
            CLEAR l_carta-carta.
            l_carta-carta = NEW lcl_card(
                iv_tipo  = palo_ch
                iv_valor = figura
                iv_color = color
            ).
            APPEND l_carta TO cartas.
          ENDDO.

        ENDDO.

      WHEN 'Baraja EspaÃ±ola'.
        DO 40 TIMES.

        ENDDO.

    ENDCASE.
  ENDMETHOD.
  METHOD barajar_cartas.
    DATA count TYPE i.

    " Create instance with factory
*    DATA(lo_rand) = cl_abap_random=>create( ).


    IF cartas[] IS NOT INITIAL.
      DATA(aux) = cartas[].
      CLEAR cartas[].
      LOOP AT aux ASSIGNING FIELD-SYMBOL(<a>).
        IF sy-tabix = 1.
          APPEND <a> TO cartas.
        ELSE.
          count = lines( cartas ).
          " Random number from 1 till  ...
          DATA(ld_num) = lcl_random_num=>get_next_number( i_max = count ).
          "lo_rand->intinrange( low = 1 high = count ).
          INSERT <a> INTO cartas INDEX ld_num.
        ENDIF.

      ENDLOOP.

    ENDIF.
  ENDMETHOD.

  METHOD get_cartas.
    r_cartas = cartas.
  ENDMETHOD.

  METHOD give_card.
    IF cartas[] IS NOT INITIAL.
      DATA(count) = lines( cartas ).
      DATA(ld_num) = lcl_random_num=>get_next_number( i_max = count ).
      "lo_rand->intinrange( low = 1 high = count ).
      r_carta = cartas[ ld_num ]-carta.
      remove_card( r_carta ).
    ENDIF.
  ENDMETHOD.

  METHOD remove_card.
    IF cartas[] IS NOT INITIAL.
      READ TABLE cartas ASSIGNING FIELD-SYMBOL(<card>)
                                  WITH KEY carta->color = i_carta->color
                                           carta->palo = i_carta->palo
                                           carta->valor = i_carta->valor.
      IF sy-subrc = 0.
        DELETE cartas INDEX sy-tabix.
      ENDIF.
    ENDIF.
  ENDMETHOD.

ENDCLASS.

CLASS lcl_player DEFINITION.
  PUBLIC SECTION.
    METHODS: constructor IMPORTING i_card1 TYPE REF TO lcl_card i_card2 TYPE REF TO lcl_card,
      show_cards IMPORTING out TYPE REF TO if_demo_output.

  PRIVATE SECTION.
    DATA: card1 TYPE REF TO lcl_card,
          card2 TYPE REF TO lcl_card.
ENDCLASS.
CLASS lcl_player IMPLEMENTATION.
  METHOD constructor.
    card1 = i_card1.
    card2 = i_card2.
  ENDMETHOD.

  METHOD show_cards.
    DATA l_text TYPE string.
    l_text = |{ card1->palo } { card1->valor } { card2->palo } { card2->valor }|.
    out->begin_section( 'Player Cards :' )->write_text( l_text ).
*    cl_demo_output=>display( l_text ).
  ENDMETHOD.

ENDCLASS.
CLASS lcl_table_poker DEFINITION.
  PUBLIC SECTION.
    METHODS: constructor IMPORTING i_card1 TYPE REF TO lcl_card i_card2 TYPE REF TO lcl_card i_card3 TYPE REF TO lcl_card,
      flop IMPORTING i_card TYPE REF TO lcl_card,
      river IMPORTING i_card TYPE REF TO lcl_card,
      show_3cards IMPORTING out TYPE REF TO if_demo_output,
      show_card_4 IMPORTING out TYPE REF TO if_demo_output,
      show_final_card IMPORTING out TYPE REF TO if_demo_output.
  PRIVATE SECTION.
    DATA: card1 TYPE REF TO lcl_card,
          card2 TYPE REF TO lcl_card,
          card3 TYPE REF TO lcl_card,
          card4 TYPE REF TO lcl_card,
          card5 TYPE REF TO lcl_card.
ENDCLASS.
CLASS  lcl_table_poker IMPLEMENTATION.
  METHOD constructor.
    card1 = i_card1.
    card2 = i_card2.
    card3 = i_card3.
  ENDMETHOD.

  METHOD flop.
    card4 = i_card.
  ENDMETHOD.

  METHOD river.
    card5 = i_card.
  ENDMETHOD.

  METHOD show_3cards.
    DATA l_text TYPE string.
    l_text = |{ card1->palo } { card1->valor } { card2->palo } { card2->valor } { card3->palo } { card3->valor }|.
    out->begin_section( 'Table 3 cards :' )->write_text( l_text ).
*    cl_demo_output=>display(  l_text ).
  ENDMETHOD.

  METHOD show_card_4.
    DATA l_text TYPE string.
    l_text = |card flop: { card4->palo } { card4->valor }|.
     out->begin_section( 'Table:' )->write_text( l_text ).
*    cl_demo_output=>display( l_text ).
  ENDMETHOD.

  METHOD show_final_card.
    DATA l_text TYPE string.
    l_text = |card river: { card5->palo } { card5->valor }|.
    out->begin_section( 'Table:' )->write_text( l_text ).
*    cl_demo_output=>display( l_text ).
  ENDMETHOD.

ENDCLASS.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
* Example
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 "screen
    DATA output TYPE REF TO if_demo_output.
    output = cl_demo_output=>new( cl_demo_output=>text_mode ).
    "Start game with getting the cards
    DATA(baraja) = NEW lcl_baraja( iv_game = 'Poker'  ). "#SCRIPT ZRSTPDA_SCRIPT_ZTABLINES

    "barja la carta
    baraja->barajar_cartas( ).
    "player 1 starts
    DATA(player1) = NEW lcl_player( i_card1 =  baraja->give_card(  ) i_card2 = baraja->give_card(  ) ).
    "player 2 starts
    DATA(player2) = NEW lcl_player( i_card1 =  baraja->give_card(  ) i_card2 = baraja->give_card(  ) ).
    DATA(table) = NEW lcl_table_poker(
        i_card1 = baraja->give_card(  )
        i_card2 = baraja->give_card(  )
        i_card3 = baraja->give_card(  )
    ).
    player1->show_cards(  EXPORTING out = output ).
    player2->show_cards(   EXPORTING out = output ).
    table->show_3cards(  EXPORTING out = output ).
    table->flop( i_card = baraja->give_card(  ) ).
    table->show_card_4(  EXPORTING out = output ).
    table->river( i_card = baraja->give_card(  ) ).
    table->show_final_card(  EXPORTING out = output ).
    output->display(
*      EXPORTING
*        data   =     " Text or Data
*        name   =     " Name
*      RECEIVING
*        output =
    ).
